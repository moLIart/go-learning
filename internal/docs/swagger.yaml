definitions:
  dto.CreateBoardDto:
    properties:
      size:
        type: integer
    type: object
  dto.CreatePlayerDto:
    properties:
      name:
        type: string
    type: object
  dto.CreateRoomDto:
    properties:
      code:
        type: string
    type: object
  dto.GetBoardDto:
    properties:
      id:
        type: integer
      size:
        type: integer
    type: object
  dto.GetGameDto:
    properties:
      id:
        type: integer
    type: object
  dto.GetPlayerDto:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.GetRoomDto:
    properties:
      code:
        type: string
      id:
        type: integer
    type: object
  dto.UpdateBoardDto:
    properties:
      size:
        type: integer
    type: object
  dto.UpdatePlayerDto:
    properties:
      name:
        type: string
    type: object
  dto.UpdateRoomDto:
    properties:
      code:
        type: string
    type: object
info:
  contact: {}
paths:
  /boards:
    get:
      description: Returns a list of all boards.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetBoardDto'
            type: array
        "500":
          description: Failed to encode boards
          schema:
            type: string
      summary: Get all boards
      tags:
      - boards
    post:
      consumes:
      - application/json
      description: Creates a new board with the given size and adds it to the repository.
      parameters:
      - description: Board size
        in: body
        name: board
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBoardDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetBoardDto'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Create a new board
      tags:
      - boards
  /boards/{id}:
    delete:
      description: Deletes a board by its ID.
      parameters:
      - description: Board ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Board not found
          schema:
            type: string
      summary: Delete board by ID
      tags:
      - boards
    get:
      description: Returns a board by its ID.
      parameters:
      - description: Board ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBoardDto'
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Board not found
          schema:
            type: string
      summary: Get board by ID
      tags:
      - boards
    put:
      consumes:
      - application/json
      description: Updates the size of a board by its ID.
      parameters:
      - description: Board ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated board size
        in: body
        name: board
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBoardDto'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter or request body
          schema:
            type: string
        "404":
          description: Board not found
          schema:
            type: string
      summary: Update board by ID
      tags:
      - boards
  /games:
    get:
      description: Returns a list of all games.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetGameDto'
            type: array
        "500":
          description: Failed to encode games
          schema:
            type: string
      summary: Get all games
      tags:
      - games
    post:
      description: Creates a new game and adds it to the repository.
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetGameDto'
      summary: Create a new game
      tags:
      - games
  /games/{id}:
    delete:
      description: Deletes a game by its ID.
      parameters:
      - description: Game ID
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Game not found
          schema:
            type: string
      summary: Delete game by ID
      tags:
      - games
    get:
      description: Returns a game by its ID.
      parameters:
      - description: Game ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGameDto'
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Game not found
          schema:
            type: string
      summary: Get game by ID
      tags:
      - games
  /players:
    get:
      description: Returns a list of all players.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetPlayerDto'
            type: array
        "500":
          description: Failed to encode players
          schema:
            type: string
      summary: Get all players
      tags:
      - players
    post:
      consumes:
      - application/json
      description: Creates a new player with the given name and adds it to the repository.
      parameters:
      - description: Player name
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePlayerDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetPlayerDto'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Create a new player
      tags:
      - players
  /players/{id}:
    delete:
      description: Deletes a player by their ID.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Player not found
          schema:
            type: string
      summary: Delete player by ID
      tags:
      - players
    get:
      description: Returns a player by their ID.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetPlayerDto'
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Player not found
          schema:
            type: string
      summary: Get player by ID
      tags:
      - players
    put:
      consumes:
      - application/json
      description: Updates the name of a player by their ID.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated player name
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePlayerDto'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter or request body
          schema:
            type: string
        "404":
          description: Player not found
          schema:
            type: string
      summary: Update player by ID
      tags:
      - players
  /rooms:
    get:
      description: Returns a list of all rooms.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetRoomDto'
            type: array
        "500":
          description: Failed to encode rooms
          schema:
            type: string
      summary: Get all rooms
      tags:
      - rooms
    post:
      consumes:
      - application/json
      description: Creates a new room with the given code and adds it to the repository.
      parameters:
      - description: Room code
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoomDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetRoomDto'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Create a new room
      tags:
      - rooms
  /rooms/{id}:
    delete:
      description: Deletes a room by its ID.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Room not found
          schema:
            type: string
      summary: Delete room by ID
      tags:
      - rooms
    get:
      description: Returns a room by its ID.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetRoomDto'
        "400":
          description: Invalid id parameter
          schema:
            type: string
        "404":
          description: Room not found
          schema:
            type: string
      summary: Get room by ID
      tags:
      - rooms
    put:
      consumes:
      - application/json
      description: Updates the code of a room by its ID.
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated room code
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoomDto'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Invalid id parameter or request body
          schema:
            type: string
        "404":
          description: Room not found
          schema:
            type: string
      summary: Update room by ID
      tags:
      - rooms
swagger: "2.0"
